{
    "title": "Three.js Scene",
    "description": "Load a Three.js Scene (might be THREE.js version-specific; you can see THREE.js version in the JS console once you open ARENA; using glTF is preferred) \n\nFormat: <a href='https://threejs.org/docs/#api/en/scenes/Scene'>https://threejs.org/docs/#api/en/scenes/Scene</a>",
    "required": [
        "object_id",
        "action",
        "type",
        "data",
        "persist"
    ],
    "properties": {
        "object_id": {
            "description": "A uuid or otherwise unique identifier for this object",
            "minLength": 3,
            "type": "string"
        },
        "persist": {
            "default": "true",
            "description": "Persist this object in the database (default true = persist on server)",
            "type": "boolean"
        },
        "type": {
            "description": "One of the message types: object (3D A-Frame Object), scene-options, program (derived from 'type' select above)",
            "enum": [
                "object"
            ],
            "type": "string"
        },
        "action": {
            "default": "create",
            "description": "One of 3 basic Create/Update/Delete actions or a special client event action (e.g. a click)",
            "enum": [
                "create",
                "delete",
                "update",
                "clientEvent"
            ],
            "type": "string"
        },
        "ttl": {
            "description": "When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment.",
            "type": "integer"
        },
        "data": {
            "title": "Three.js Scene Data",
            "additionalProperties": true,
            "default": {
                "object_type": "threejs-scene",
                "position": {
                    "x": 0,
                    "y": 0,
                    "z": 0
                },
                "rotation": {
                    "x": 0,
                    "y": 0,
                    "z": 0
                },
                "scale": {
                    "x": 1,
                    "y": 1,
                    "z": 1
                }
            },
            "required": [
                "object_type",
                "url",
                "position",
                "rotation",
                "scale"
            ],
            "properties": {
                "object_type": {
                    "type": "string",
                    "title": "3D object type",
                    "description": "3D object type (derived from 'type' select above).",
                    "enum": [
                        "threejs-scene"
                    ]
                },
                "url": {
                    "description": "Model URL. Store files paths under 'store/users/<username>' (e.g. store/users/wiselab/models/factory_robot_arm/scene.gltf); to use CDN, prefix with `https://arena-cdn.conix.io/` (e.g. https://arena-cdn.conix.io/store/users/wiselab/models/factory_robot_arm/scene.gltf)",
                    "format": "uri",
                    "title": "Url",
                    "type": "string"
                },
                "parent": {
                    "description": "Parent's object_id. Child objects inherit attributes of their parent, for example scale and translation.",
                    "title": "Parent",
                    "type": "string"
                },
                "position": {
                    "$ref": "#/definitions/position"
                },
                "rotation": {
                    "$ref": "#/definitions/rotation"
                },
                "scale": {
                    "$ref": "#/definitions/scale"
                },
                "animation": {
                    "$ref": "#/definitions/animation"
                },
                "armarker": {
                    "$ref": "#/definitions/armarker"
                },
                "click-listener": {
                    "description": "Object will listen for clicks",
                    "title": "Click Listener",
                    "type": "boolean"
                },
                "collision-listener": {
                    "description": "Name of the collision-listener, default can be empty string",
                    "title": "Collision Listener",
                    "type": "string"
                },
                "color": {
                    "default": "#ffa500",
                    "format": "color",
                    "title": "Color",
                    "type": "string"
                },
                "dynamic-body": {
                    "$ref": "#/definitions/dynamic-body"
                },
                "goto-landmark": {
                    "$ref": "#/definitions/goto-landmark"
                },
                "goto-url": {
                    "$ref": "#/definitions/goto-url"
                },
                "hide-on-enter-ar": {
                    "description": "Hide object when entering AR. Remove component to *not* hide",
                    "title": "Hide in AR",
                    "type": "boolean",
                    "enum": [
                        true
                    ]
                },
                "hide-on-enter-vr": {
                    "description": "Hide object when entering VR. Remove component to *not* hide",
                    "title": "Hide in VR",
                    "type": "boolean",
                    "enum": [
                        true
                    ]
                },
                "impulse": {
                    "$ref": "#/definitions/impulse"
                },
                "landmark": {
                    "$ref": "#/definitions/landmark"
                },
                "material-extras": {
                    "$ref": "#/definitions/material-extras"
                },
                "shadow": {
                    "$ref": "#/definitions/shadow"
                },
                "sound": {
                    "$ref": "#/definitions/sound"
                },
                "textinput": {
                    "$ref": "#/definitions/textinput"
                },
                "screenshareable": {
                    "default": true,
                    "description": "Whether or not a user can screenshare on an object",
                    "title": "Screenshare-able",
                    "type": "boolean"
                },
                "video-control": {
                    "$ref": "#/definitions/video-control"
                },
                "attribution": {
                    "$ref": "#/definitions/attribution"
                }
            }
        }
    },
    "definitions": {
        "position": {
            "description": "3D object position",
            "properties": {
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                }
            },
            "required": [
                "x",
                "y",
                "z"
            ],
            "type": "object",
            "title": "Position"
        },
        "rotation": {
            "description": "3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format.",
            "properties": {
                "w": {
                    "default": 1,
                    "type": "number"
                },
                "x": {
                    "default": 0,
                    "type": "number"
                },
                "y": {
                    "default": 0,
                    "type": "number"
                },
                "z": {
                    "default": 0,
                    "type": "number"
                }
            },
            "required": [
                "w",
                "x",
                "y",
                "z"
            ],
            "type": "object",
            "title": "Rotation"
        },
        "scale": {
            "default": {
                "x": 1,
                "y": 1,
                "z": 1
            },
            "description": "3D object scale",
            "id": "scale",
            "properties": {
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                }
            },
            "required": [
                "x",
                "y",
                "z"
            ],
            "type": "object",
            "title": "Scale"
        },
        "animation": {
            "description": "Animate and tween values. \n\nMore properties at <a href='https://aframe.io/docs/1.3.0/components/animation.html'>https://aframe.io/docs/1.3.0/components/animation.html</a>",
            "properties": {
                "autoplay": {
                    "default": true,
                    "description": "Whether or not the animation should autoplay. Should be specified if the animation is defined for the animation-timeline component (currently not supported).",
                    "type": "boolean"
                },
                "delay": {
                    "default": 0,
                    "description": "How long (milliseconds) to wait before starting.",
                    "type": "number"
                },
                "dir": {
                    "default": "normal",
                    "description": "Which dir to go from from to to.",
                    "enum": [
                        "normal",
                        "alternate",
                        "reverse"
                    ],
                    "type": "string"
                },
                "dur": {
                    "default": 1000,
                    "description": "How long (milliseconds) each cycle of the animation is.",
                    "type": "number"
                },
                "easing": {
                    "default": "easeInQuad",
                    "description": "Easing function of animation. To ease in, ease out, ease in and out.",
                    "type": "string"
                },
                "elasticity": {
                    "default": 400,
                    "description": "How much to bounce (higher is stronger).",
                    "type": "number"
                },
                "enabled": {
                    "default": true,
                    "description": "If disabled, animation will stop and startEvents will not trigger animation start.",
                    "type": "boolean"
                },
                "from": {
                    "default": "",
                    "description": "Initial value at start of animation. If not specified, the current property value of the entity will be used (will be sampled on each animation start). It is best to specify a from value when possible for stability.",
                    "type": "string"
                },
                "isRawProperty": {
                    "default": false,
                    "description": "Flag to animate an arbitrary object property outside of A-Frame components for better performance. If set to true, for example, we can set property to like components.material.material.opacity. If property starts with components or object3D, this will be inferred to true.",
                    "type": "boolean"
                },
                "loop": {
                    "default": 0,
                    "description": "How many times the animation should repeat. If the value is true, the animation will repeat infinitely.",
                    "type": "number"
                },
                "pauseEvents": {
                    "default": [],
                    "description": "Comma-separated list of events to listen to trigger pause. Can be resumed with resumeEvents.",
                    "type": "array"
                },
                "property": {
                    "description": "Property to animate. Can be a component name, a dot-delimited property of a component (e.g., material.color), or a plain attribute.",
                    "type": "string"
                },
                "resumeEvents": {
                    "default": [],
                    "description": "Comma-separated list of events to listen to trigger resume after pausing.",
                    "type": "array"
                },
                "round": {
                    "default": false,
                    "description": "Whether to round values.",
                    "type": "boolean"
                },
                "startEvents": {
                    "default": [],
                    "description": "Comma-separated list of events to listen to trigger a restart and play. Animation will not autoplay if specified. startEvents will restart the animation, use pauseEvents to resume it. If there are other animation components on the entity animating the same property, those animations will be automatically paused to not conflict.",
                    "type": "array"
                },
                "to": {
                    "default": "",
                    "description": "Target value at end of animation.",
                    "type": "string"
                },
                "type": {
                    "default": "",
                    "description": "Right now only supports color for tweening isRawProperty color XYZ/RGB vector values.",
                    "type": "string"
                }
            },
            "title": "Animation",
            "type": "object"
        },
        "armarker": {
            "default": {
                "buildable": false,
                "dynamic": false,
                "markerid": "0",
                "markertype": "apriltag_36h11",
                "size": 150
            },
            "description": "A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world.",
            "properties": {
                "publish": {
                    "type": "boolean",
                    "title": "publish",
                    "description": "Publish detections. Send detections to external agents (e.g. external builder script that places new markers in the scene). If dynamic=true and publish=true, object position is not updated (left up to external agent).",
                    "default": false
                },
                "dynamic": {
                    "type": "boolean",
                    "title": "dynamic",
                    "description": "Dynamic tag, not used for localization. E.g., to move object to which this ARMarker component is attached to. Requires permissions to update the scene (if dynamic=true).",
                    "default": false
                },
                "ele": {
                    "default": 0,
                    "title": "elevation",
                    "description": "Tag elevation in meters.",
                    "type": "number"
                },
                "lat": {
                    "default": 0,
                    "maximum": 90,
                    "minimum": -90,
                    "title": "latitude",
                    "description": "Tag latitude.",
                    "type": "number"
                },
                "long": {
                    "default": 0,
                    "maximum": 180,
                    "minimum": -180,
                    "title": "longitude",
                    "description": "Tag longitude.",
                    "type": "number"
                },
                "markerid": {
                    "default": 0,
                    "title": "markerid",
                    "description": "The marker id (e.g. for AprilTag 36h11 family, an integer in the range [0, 586])",
                    "type": "string"
                },
                "markertype": {
                    "default": "apriltag_36h11",
                    "enum": [
                        "apriltag_36h11",
                        "lightanchor",
                        "uwb"
                    ],
                    "title": "markertype",
                    "description": "The marker type (apriltag_36h11, lightanchor, uwb)",
                    "type": "string"
                },
                "size": {
                    "default": 150,
                    "title": "size",
                    "description": "Tag size in millimeters",
                    "type": "number"
                },
                "url": {
                    "default": "",
                    "url": "size",
                    "description": "URL associated with the tag",
                    "type": "string"
                }
            },
            "required": [
                "markertype",
                "markerid",
                "size"
            ],
            "title": "ARMarker",
            "type": "object"
        },
        "dynamic-body": {
            "description": "Physics type attached to the object. \n\nMore properties at <a href='https://github.com/n5ro/aframe-physics-system#dynamic-body-and-static-body'>https://github.com/n5ro/aframe-physics-system#dynamic-body-and-static-body</a>",
            "properties": {
                "type": {
                    "enum": [
                        "static",
                        "dynamic"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "title": "Physics",
            "type": "object"
        },
        "goto-landmark": {
            "description": "Teleports user to the landmark with the given name; Requires click-listener",
            "properties": {
                "on": {
                    "enum": [
                        "mousedown",
                        "mouseup"
                    ],
                    "type": "string"
                },
                "landmark": {
                    "default": "",
                    "type": "string"
                }
            },
            "required": [
                "landmark",
                "on"
            ],
            "title": "Goto Landmark",
            "type": "object"
        },
        "goto-url": {
            "description": "Goto given URL; Requires click-listener",
            "properties": {
                "dest": {
                    "enum": [
                        "popup",
                        "newtab",
                        "sametab"
                    ],
                    "type": "string"
                },
                "on": {
                    "enum": [
                        "mousedown",
                        "mouseup"
                    ],
                    "type": "string"
                },
                "url": {
                    "format": "uri",
                    "type": "string"
                }
            },
            "required": [
                "dest",
                "on",
                "url"
            ],
            "title": "Goto URL",
            "type": "object"
        },
        "impulse": {
            "description": "The force applied using physics. Requires click-listener",
            "properties": {
                "force": {
                    "type": "string"
                },
                "on": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                }
            },
            "title": "Impulse",
            "type": "object"
        },
        "landmark": {
            "title": "Landmark",
            "type": "object",
            "description": "Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists)",
            "properties": {
                "randomRadiusMin": {
                    "default": 0,
                    "description": "Minimum radius from the landmark to teleport to. (randomRadiusMax must > 0)",
                    "type": "number"
                },
                "randomRadiusMax": {
                    "default": 0,
                    "description": "Maximum radius from the landmark to teleport to.",
                    "type": "number"
                },
                "offsetPosition": {
                    "description": "Use as a static teleport x,y,z offset",
                    "properties": {
                        "x": {
                            "type": "number",
                            "default": 0
                        },
                        "y": {
                            "type": "number",
                            "default": 1.6
                        },
                        "z": {
                            "type": "number",
                            "default": 0
                        }
                    },
                    "required": [
                        "x",
                        "y",
                        "z"
                    ]
                },
                "constrainToNavMesh": {
                    "description": "Teleports should snap to navmesh. Valid values: 'false', 'any', 'coplanar'",
                    "enum": [
                        "false",
                        "any",
                        "coplanar"
                    ],
                    "type": "string",
                    "default": "false"
                },
                "startingPosition": {
                    "default": false,
                    "description": "Set to true to use this landmark as a scene start (spawn) position. If several landmarks with startingPosition=true exist in a scene, one will be randomly selected.",
                    "type": "boolean"
                },
                "lookAtLandmark": {
                    "default": true,
                    "description": "Set to true to make users face the landmark when teleported to it.",
                    "type": "boolean"
                },
                "label": {
                    "default": "",
                    "description": "Landmark description to display in the landmark list",
                    "type": "string"
                }
            },
            "default": {
                "randomRadiusMin": 0,
                "randomRadiusMax": 0,
                "lookAtLandmark": true
            },
            "required": [
                "label"
            ]
        },
        "material-extras": {
            "default": {
                "encoding": "sRGBEncoding"
            },
            "description": "Define extra material properties, namely texture encoding, whether to render the material's color and render order. The properties set here access directly Three.js material component. \n\nMore properties at <a href='https://threejs.org/docs/#api/en/materials/Material'>https://threejs.org/docs/#api/en/materials/Material</a>",
            "properties": {
                "overrideSrc": {
                    "type": "string",
                    "default": "",
                    "description": "Overrides the material source in all meshes of an object (e.g. a basic shape or a GLTF); Use, for example, to change the texture of a GLTF."
                },
                "encoding": {
                    "default": "sRGBEncoding",
                    "enum": [
                        "LinearEncoding",
                        "sRGBEncoding",
                        "GammaEncoding",
                        "RGBEEncoding",
                        "LogLuvEncoding",
                        "RGBM7Encoding",
                        "RGBM16Encoding",
                        "RGBDEncoding",
                        "BasicDepthPacking",
                        "RGBADepthPacking"
                    ],
                    "type": "string"
                },
                "colorWrite": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to render the material's color."
                },
                "renderOrder": {
                    "type": "number",
                    "default": 1,
                    "description": "Allows the default rendering order of scene graph objects to be overridden."
                },
                "transparentOccluder": {
                    "type": "boolean",
                    "default": false,
                    "description": "If `true`, will set `colorWrite=false` and `renderOrder=0` to make the material a transparent occluder."
                }
            },
            "title": "Material extras",
            "type": "object"
        },
        "shadow": {
            "title": "Shadow",
            "type": "object",
            "default": {
                "cast": false,
                "receive": false
            },
            "properties": {
                "cast": {
                    "default": false,
                    "description": "Whether the entity casts shadows onto the surrounding scene",
                    "title": "cast shadow",
                    "type": "boolean"
                },
                "receive": {
                    "default": false,
                    "description": "Whether the entity receives shadows from the surrounding scene",
                    "title": "receive shadow",
                    "type": "boolean"
                }
            }
        },
        "sound": {
            "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the component's position. \n\nMore properties at <a href='https://aframe.io/docs/1.3.0/components/sound.html'>https://aframe.io/docs/1.3.0/components/sound.html</a>",
            "properties": {
                "autoplay": {
                    "default": false,
                    "description": "Whether to automatically play sound once set.",
                    "type": "boolean"
                },
                "distanceModel": {
                    "default": "inverse",
                    "description": "Sound model: linear, inverse, or exponential.",
                    "enum": [
                        "linear",
                        "inverse",
                        "exponential"
                    ],
                    "type": "string"
                },
                "loop": {
                    "default": false,
                    "description": "Whether to loop the sound once the sound finishes playing.",
                    "type": "boolean"
                },
                "maxDistance": {
                    "default": 10000,
                    "description": "Maximum distance between the audio source and the listener, after which the volume is not reduced any further.",
                    "type": "number"
                },
                "on": {
                    "default": "mousedown",
                    "description": "An event for the entity to listen to before playing sound.",
                    "enum": [
                        "mousedown",
                        "mouseup",
                        "mouseenter",
                        "mouseleave",
                        "triggerdown",
                        "triggerup",
                        "gripdown",
                        "gripup",
                        "menudown",
                        "menuup",
                        "systemdown",
                        "systemup",
                        "trackpaddown",
                        "trackpadup"
                    ],
                    "type": "string"
                },
                "poolSize": {
                    "default": 1,
                    "description": "Numbers of simultaneous instances of this sound that can be playing at the same time",
                    "type": "number"
                },
                "positional": {
                    "default": true,
                    "description": "Whether or not the audio is positional (movable).",
                    "type": "boolean"
                },
                "refDistance": {
                    "default": 1,
                    "description": "Reference distance for reducing volume as the audio source moves further from the listener.",
                    "type": "number"
                },
                "rolloffFactor": {
                    "default": 1,
                    "description": "Describes how quickly the volume is reduced as the source moves away from the listener.",
                    "type": "number"
                },
                "src": {
                    "description": "URL path to sound file e.g. 'store/users/wiselab/sound/wave.mp3'",
                    "format": "uri",
                    "type": "string"
                },
                "volume": {
                    "default": 1,
                    "description": "How loud to play the sound",
                    "type": "number"
                }
            },
            "title": "Positional Sound",
            "type": "object"
        },
        "textinput": {
            "title": "Text Input",
            "description": "Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener.",
            "type": "object",
            "default": {
                "on": "mousedown",
                "title": "Text Input",
                "label": "Input text below (max is 140 characters)",
                "placeholder": "Type here"
            },
            "properties": {
                "on": {
                    "default": "mousedown",
                    "description": "A case-sensitive string representing the event type to listen for, e.g. 'mousedown', 'mouseup'. See https://developer.mozilla.org/en-US/docs/Web/Events",
                    "enum": [
                        "mousedown",
                        "mouseup",
                        "mouseenter",
                        "mouseleave",
                        "triggerdown",
                        "triggerup",
                        "gripdown",
                        "gripup",
                        "menudown",
                        "menuup",
                        "systemdown",
                        "systemup",
                        "trackpaddown",
                        "trackpadup"
                    ],
                    "type": "string"
                },
                "title": {
                    "default": "Text Input",
                    "description": "The prompt title",
                    "type": "string"
                },
                "label": {
                    "default": "Input text below (max is 140 characters)",
                    "description": "Text prompt label",
                    "type": "string"
                },
                "placeholder": {
                    "default": "Type here",
                    "description": "Text input place holder",
                    "type": "string"
                }
            }
        },
        "video-control": {
            "description": "Video Control",
            "properties": {
                "frame_object": {
                    "description": "URL of a thumbnail image, e.g. 'store/users/wiselab/images/conix-face-white.jpg'",
                    "format": "uri",
                    "type": "string"
                },
                "video_object": {
                    "description": "Name of object where to put the video, e.g. 'square_vid6'",
                    "type": "string"
                },
                "video_path": {
                    "description": "URL of the video file, e.g. 'store/users/wiselab/videos/kungfu.mp4'",
                    "format": "uri",
                    "type": "string"
                },
                "anyone_clicks": {
                    "description": "Responds to clicks from any user",
                    "type": "boolean",
                    "default": true
                },
                "video_loop": {
                    "description": "Video automatically loops",
                    "type": "boolean",
                    "default": true
                },
                "autoplay": {
                    "description": "Video starts playing automatically",
                    "type": "boolean",
                    "default": false
                },
                "volume": {
                    "description": "Video sound volume",
                    "type": "number",
                    "default": 1
                }
            },
            "required": [
                "video_object",
                "frame_object",
                "video_path"
            ],
            "title": "Video",
            "type": "object"
        },
        "attribution": {
            "description": "Attribution Component. Saves attribution data in any entity.",
            "properties": {
                "author": {
                    "type": "string",
                    "default": "Unknown",
                    "description": "Author name; e.g. \u201cVaptor-Studio\u201d"
                },
                "authorURL": {
                    "type": "string",
                    "description": "Author homepage/profile; e.g. https://sketchfab.com/VapTor"
                },
                "license": {
                    "type": "string",
                    "default": "Unknown",
                    "description": "License summary/short name; e.g. \u201cCC-BY-4.0\u201d."
                },
                "licenseURL": {
                    "type": "string",
                    "description": "License URL; e.g. http://creativecommons.org/licenses/by/4.0/"
                },
                "source": {
                    "type": "string",
                    "default": "Unknown",
                    "description": "Model source e.g. \u201cSketchfab\u201d."
                },
                "sourceURL": {
                    "type": "string",
                    "description": "Model source URL; e.g. https://sketchfab.com/models/2135501583704537907645bf723685e7"
                },
                "title": {
                    "type": "string",
                    "default": "No Title",
                    "description": "Model title; e.g. \u201cSpinosaurus\u201d."
                },
                "extractAssetExtras": {
                    "type": "boolean",
                    "default": true,
                    "description": "Extract attribution info from asset extras; will override attribution info given (default: true)"
                }
            },
            "title": "Attribution",
            "type": "object"
        }
    }
}
/**
 * Open source software under the terms in /LICENSE
 * Copyright (c) 2021-2023, Carnegie Mellon University. All rights reserved.
 */

// CAUTION: This file is autogenerated from https://github.com/arenaxr/arena-schemas. Changes made here may be overwritten.

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace ArenaUnity.Schemas
{
    /// <summary>
    /// {{ prop_schema.description | replace("\n", " ") }}
    /// </summary>
    [Serializable]
    public class {{ prop_class }}
    {
        public readonly string object_type = "cube";

        // cube member-fields

{% if prop_schema.properties -%}
{% for propname, prop in prop_schema.properties.items() -%}
{% if 'deprecated' not in prop and propname != 'object_type' %}
        private static {% if prop.items %}{{ jstype2cstype(prop.type, prop['items']['type']) }}{% else %}{{ jstype2cstype(prop.type, None) }}{% endif %} def{{ pascalcase(propname) }} = {% if prop.default %}{{ format_value(prop.type, prop.default) }}{% else %}null{% endif %};
        [JsonProperty(PropertyName = "{{ propname }}")]
        [Tooltip("{% if prop.description %}{{ prop.description.split('\n')[0] }}{% else %}{{ prop.title }}{% endif %}")]
        public {% if prop.items %}{{ jstype2cstype(prop.type, prop['items']['type']) }}{% else %}{{ jstype2cstype(prop.type, None) }}{% endif %} {{ pascalcase(propname) }} = def{{ pascalcase(propname) }};
        public bool ShouldSerialize{{ pascalcase(propname) }}()
        {
            // {{ propname }}
            return ({{ pascalcase(propname) }} != def{{ pascalcase(propname) }});
        }

{%- endif %}
{%- endfor %}
{%- endif %}
        // General json object management
        [OnError]
        internal void OnError(StreamingContext context, ErrorContext errorContext)
        {
            Debug.LogWarning($"{errorContext.Error.Message}: {errorContext.OriginalObject}");
            errorContext.Handled = true;
        }

        [JsonExtensionData]
        private IDictionary<string, JToken> _additionalData;
    }
}
